#!/usr/bin/env python3
import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk, Gio, Gdk, GLib
import dropby_tools as db
import subprocess
import os
import psutil
import sys
import cairo
import ast


"""
DropBy
Author: Jacob Vlijm
Copyright Â© 2017-2022 Ubuntu Budgie Developers
Website=https://ubuntubudgie.org
This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or any later version. This
program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details. You
should have received a copy of the GNU General Public License along with this
program.  If not, see <https://www.gnu.org/licenses/>.
"""


class RoundedWindow(Gtk.Window):

    def __init__(self, widget, screenposition):
        Gtk.Window.__init__(self)
        windowstyle = self.get_style()
        self.rgb = windowstyle[0]
        self.radius = windowstyle[1]
        self.winpos = screenposition
        self.screen = Gdk.Screen.get_default()
        self.mainlayout = Gtk.Layout()
        self.mainbox = Gtk.Box()
        self.mainbox.add(widget)
        self.drawing_area = Gtk.DrawingArea()
        self.winwidth = 10
        self.winheight = 10
        self.make_background_transparent()
        self.set_decorated(False)
        self.define_background()
        self.show_all()

    def get_style(self):
        gset = Gtk.Settings.get_default()
        themename = gset.get_property("gtk-theme-name")
        cprov = Gtk.CssProvider.get_named(themename)
        test = cprov.to_string()
        red, green, blue = 0.0, 0.0, 0.0
        radius = 32
        colorsearch = False
        radiusearch = False
        done = 0
        for line in test.splitlines():
            if colorsearch:
                if "background-color" in line:
                    cval = ast.literal_eval(
                        line.split(")", 1)[0].split("(")[1]
                    )
                    red, green, blue = cval[0] / 255, cval[1] / 255,
                    cval[2] / 255
                    colorsearch = False
                    done = done + 1
            elif radiusearch:
                if "radius:" in line:
                    radius = int(line.split(" ")[-1].strip("px;")) * 2
                    radiusearch = False
                    done = done + 1
            else:
                if ".menu {" in line:
                    colorsearch = True
                elif ".app-notification {" in line:
                    radiusearch = True
                if done == 2:
                    break
        return ((red, green, blue), radius)

    def define_background(self):
        self.drawing_area.connect("draw", self.on_draw)
        self.mainlayout.put(self.drawing_area, 0, 0)
        self.mainlayout.put(self.mainbox, 0, 0)
        self.mainlayout.show_all()
        self.add(self.mainlayout)

    def on_draw(self, da, ctx):
        alloc = self.mainbox.get_allocation()
        self.winwidth = alloc.width
        self.winheight = alloc.height
        self.set_position(self.winwidth, self.winheight)
        self.resize(self.winwidth, self.winheight)
        self.drawing_area.set_size_request(self.winwidth, self.winheight)
        # fetch window color
        style = self.get_style_context()
        ctx.set_source_rgba(self.rgb[0], self.rgb[1], self.rgb[2])
        # let's draw
        ctx.set_line_width(self.radius)
        ctx.set_line_join(cairo.LineJoin.ROUND)
        self.draw_lines(ctx)
        self.draw_background(ctx)
        return True

    def draw_lines(self, ctx):
        ctx.save()
        self.rectangle(ctx)
        ctx.stroke()

    def draw_background(self, ctx):
        ctx.save()
        self.rectangle(ctx)
        ctx.fill()

    def rectangle(self, ctx):
        ctx.move_to(self.radius / 2, self.radius / 2)
        ctx.rel_line_to(self.winwidth - self.radius, 0)
        ctx.rel_line_to(0, self.winheight - (self.radius))
        ctx.rel_line_to(- (self.winwidth - self.radius), 0)
        ctx.close_path()

    def make_background_transparent(self):
        self.set_app_paintable(True)
        visual = self.screen.get_rgba_visual()
        self.set_visual(visual)

    def set_position(self, winw, winh):
        dsp = Gdk.Display.get_default().get_primary_monitor().get_geometry()
        # top-left
        if self.winpos == 1:
            self.move(
                dsp.x + 80,
                dsp.y + 80
            )
        # top-right
        elif self.winpos == 2:
            self.move(
                dsp.x + dsp.width - (winw + 80),
                dsp.y + 80
            )
        # bottom-left
        elif self.winpos == 3:
            self.move(
                dsp.x + 80,
                dsp.y + dsp.height - (80 + winh)
            )
        # bottom-right
        if self.winpos == 4:
            self.move(
                dsp.x + dsp.width - (winw + 80),
                dsp.y + dsp.height - (80 + winh)
            )


dropby_css = """
.label {
  padding-bottom: 7px;
  padding-top: 0px;
  font-weight: bold;
}
"""


class WatchVolumes:

    def __init__(self, uuid):
        # setup watching connections
        self.uuid = uuid
        self.watchdrives = Gio.VolumeMonitor.get()
        triggers = [
            "volume_added", "volume_removed", "mount_added", "mount_removed",
        ]
        for t in triggers:
            self.watchdrives.connect(t, self.actonconnect, t)
        # workaround to only open nautilus on our own action
        self.act_onmount = False
        # setup css
        self.provider = Gtk.CssProvider.new()
        self.provider.load_from_data(dropby_css.encode())
        self.newwin = None

        self.settings = Gio.Settings.new(
            "org.ubuntubudgie.plugins.budgie-dropby"
        )
        self.settings.connect("changed", self.update_corner)
        self.update_corner()

        app_path = os.path.dirname(os.path.abspath(__file__))
        self.copyscript = os.path.join(app_path, "copy_flash")
        self.start_timer = os.path.join(app_path, "checkonwin")
        user = os.environ["USER"]
        self.timer = "/tmp/" + user + "_keepdropbywin"
        # setup watching trigger (uncomment below lines if)
        infofile = Gio.File.new_for_path("/tmp")
        monitor = infofile.monitor(Gio.FileMonitorFlags.NONE, None)
        monitor.connect("changed", self.actonfile)
        # setup watching applet presence
        self.currpanelsubject_settings = None
        GLib.timeout_add_seconds(1, self.watchout)
        Gtk.main()

    def watchout(self):
        path = "com.solus-project.budgie-panel"
        panelpath_prestring = "/com/solus-project/budgie-panel/panels/"
        panel_settings = Gio.Settings.new(path)
        allpanels_list = panel_settings.get_strv("panels")
        for p in allpanels_list:
            panelpath = panelpath_prestring + "{" + p + "}/"
            self.currpanelsubject_settings = Gio.Settings.new_with_path(
                path + ".panel", panelpath
            )
            applets = self.currpanelsubject_settings.get_strv("applets")
            if self.uuid in applets:
                self.currpanelsubject_settings.connect(
                    "changed", self.check_ifonpanel
                )
        return False

    def check_ifonpanel(self, *args):
        applets = self.currpanelsubject_settings.get_strv("applets")
        if self.uuid not in applets:
            Gtk.main_quit()

    def update_corner(self, *args):
        self.winpos = self.settings.get_int("popup-corner")

    def actonfile(self, arg1, arg2, arg3, event):
        # ok, let's replace once dbus is a fact
        user = os.environ["USER"]
        trigger = "/tmp/" + user + "_call_dropby"
        if all([
            event == Gio.FileMonitorEvent.CREATED,
            os.path.exists(trigger)
        ]):
            os.remove(trigger)
            self.actonconnect()

    def process_check(self, process):
        try:
            pid = subprocess.check_output([
                "/usr/bin/pgrep", "-f", process
            ]).decode("utf-8")
            return True
        except subprocess.CalledProcessError:
            return False

    def process_kill(self, procname):
        try:
            subprocess.call(["/usr/bin/pkill", "-f", procname])
        except subprocess.CalledProcessError:
            pass

    def getridofwindow(self, *args):
        # since we are keeping Gtk.main
        try:
            self.newwin.destroy()
            self.newwin = None
        except AttributeError:
            pass
        try:
            os.remove(self.timer)
        except FileNotFoundError:
            pass
        self.process_kill(self.start_timer)

    def busy(self, arg1, arg2):
        open(self.timer, "wt").write("")

    def outofajob(self, arg1, arg2):
        try:
            os.remove(self.timer)
        except FileNotFoundError:
            pass

    def create_win(self, subject=None, newvol=None):
        self.maingrid = Gtk.Grid()
        window = RoundedWindow(self.maingrid, self.winpos)
        window.connect("enter-notify-event", self.busy)
        window.connect("leave-notify-event", self.outofajob)
        window.set_title("dropby_popup")
        window.set_type_hint(Gdk.WindowTypeHint.POPUP_MENU)
        window.set_keep_above(True)
        window.connect("destroy", self.getridofwindow)
        self.process_kill(self.start_timer)
        subprocess.Popen(self.start_timer)
        return window

    def create_label(self, text):
        label = Gtk.Label()
        label.set_text(text)
        label.set_xalign(0)
        label.connect("enter-notify-event", self.busy)
        return label

    def create_button(self, text=None, icon=None):
        button = Gtk.Button()
        if text:
            button.set_label(text)
        if icon:
            button.set_image(icon)
        button.set_relief(Gtk.ReliefStyle.NONE)
        button.connect("enter-notify-event", self.busy)
        return button

    def fill_grid(self, get_relevant, newvol):
        pos = 2
        for d in get_relevant:
            vol_name = d["name"]
            # namebutton
            addition = " *" if d["volume"] == newvol else " "
            namebutton = self.create_button(
                text=vol_name + addition,
                icon=Gtk.Image.new_from_gicon(d["icon"], Gtk.IconSize.MENU),
            )
            namebutton.set_always_show_image(True)
            namebox = Gtk.Box()
            namebox.pack_start(namebutton, False, False, 0)
            self.maingrid.attach(namebox, 2, pos, 1, 1)
            # show free space
            freespace = self.create_label(d["free"])
            self.maingrid.attach(freespace, 3, pos, 1, 1)
            # set gui attributes for mounted volumes
            if d["ismounted"]:
                mount = d["ismounted"]
                vol_path = d["volume_path"]
                if all([mount == newvol, self.act_onmount]):
                    self.open_folder(vol_path)
                    self.act_onmount = False
                eject_button = self.create_button(
                    icon=Gtk.Image.new_from_icon_name(
                        "media-eject-symbolic", Gtk.IconSize.MENU
                    )
                )
                self.maingrid.attach(eject_button, 6, pos, 1, 1)
                if d["flashdrive"]:
                    spacer = self.create_label("\t")
                    self.maingrid.attach(spacer, 4, pos, 1, 1)
                    tooltip = "Eject"
                    eject_button.connect("clicked", self.eject_volume, mount)
                    cp_button = self.create_button(
                        icon=Gtk.Image.new_from_icon_name(
                            "media-floppy-symbolic", Gtk.IconSize.MENU
                        )
                    )
                    cp_button.set_tooltip_text("Make a local copy")
                    cp_button.connect(
                        "clicked", self.copy_flashdrive, vol_path, vol_name,
                    )
                    self.maingrid.attach(cp_button, 5, pos, 1, 1)
                else:
                    tooltip = "Unmount"
                    eject_button.connect("clicked", self.unmount_volume, mount)
                eject_button.set_tooltip_text(tooltip)
                if vol_path is not None:
                    namebutton.set_tooltip_text("Open " + vol_path)
                namebutton.connect("clicked", self.open_folder, vol_path)
            else:
                namebutton.connect("clicked", self.mount_volume, d["volume"])
                tooltip = "Mount and open " + vol_name
                namebutton.set_tooltip_text(tooltip)
            pos = pos + 1
        # create headers
        volume_label = self.create_label("Volume")
        freespace_label = self.create_label("Free\t")
        self.maingrid.attach(volume_label, 1, 1, 2, 1)
        self.maingrid.attach(freespace_label, 3, 1, 1, 1)
        # reserve space for icons
        iconreserved = Gtk.Label()
        iconreserved.set_text("\t" * 3)
        self.maingrid.attach(iconreserved, 4, 1, 10, 1)
        # set style
        for label in [volume_label, freespace_label]:
            label_cont = label.get_style_context()
            label_cont.add_class("label")
            Gtk.StyleContext.add_provider(
                label_cont,
                self.provider,
                Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
            )
        self.set_spacers()

    def set_margins(self, widget, left, right, top, bottom):
        widget.set_margin_start(left)
        widget.set_margin_end(right)
        widget.set_margin_top(top)
        widget.set_margin_bottom(bottom)

    def set_spacers(self):
        """
        lazy choice to set borders
        """
        self.set_margins(self.maingrid, 20, 0, 0, 20)
        exitbutton = Gtk.Button()
        self.set_margins(exitbutton, 0, 10, 10, 0)
        exitbutton.set_image(
            Gtk.Image.new_from_icon_name(
                "budgie-dropby-exit-symbolic", Gtk.IconSize.BUTTON,
            )
        )
        exitbutton.set_relief(Gtk.ReliefStyle.NONE)
        self.maingrid.attach(exitbutton, 100, 0, 1, 1)
        exitbutton.connect("clicked", self.getridofwindow)
        self.maingrid.show_all()

    def update_existing(self, newvol):
        # once/if popup exists, populate
        allvols = self.watchdrives.get_volumes()
        get_relevant = db.get_volumes(allvols)
        if get_relevant:
            self.fill_grid(get_relevant, newvol)
        else:
            self.getridofwindow()

    def actonconnect(self, subject=None, newvol=None, trigger=None):
        # check for relevance of changes
        all_usb = db.get_usb()
        try:
            got_uuidfromvolume = newvol.get_volume().get_uuid()
        except Exception:
            got_uuidfromvolume = None
        try:
            got_uuidfromnewvol = newvol.get_uuid()
        except Exception:
            got_uuidfromnewvol = None
        uuid = got_uuidfromvolume or got_uuidfromnewvol
        # act if uuid == None (removed) or in usb list (valid)
        if any([uuid is None, uuid in all_usb, trigger == "volume_removed"]):
            # if popup exists, update info
            if self.newwin:
                self.getridofwindow()
                self.newwin = self.create_win(subject, newvol)
                self.update_existing(newvol)
            # only create new popup on mount or connect
            elif trigger in ["volume_added", "mount_added", None]:
                self.newwin = self.create_win(subject, newvol)
                self.update_existing(newvol)

    def open_folder(self, *args):
        path = list(args)[-1]
        if path is not None:
            subprocess.Popen(["/usr/bin/xdg-open", path])

    def mount_volume(self, button, vol):
        Gio.Volume.mount(
            vol, Gio.MountMountFlags.NONE, Gio.MountOperation(), None,
        )
        self.act_onmount = True

    def unmount_volume(self, button, vol):
        Gio.Mount.unmount(vol, Gio.MountUnmountFlags.NONE, None)

    def eject_volume(self, button, vol):
        Gio.Mount.eject_with_operation(vol, Gio.MountUnmountFlags.NONE, None)

    def copy_flashdrive(self, button, source, name):
        subprocess.Popen([self.copyscript, source, name])


Gtk.init(None)
WatchVolumes(sys.argv[1])
