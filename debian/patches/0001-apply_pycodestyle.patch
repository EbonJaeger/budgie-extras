Origin: cc74faa20981ad0b9b584252db04da8766f68709,
 31883486d183184c1a460244fcb5b970fb590060
Last-Update: 20200617
Author: David Mohammed <fossfreedom@ubuntu.com>
Description: [PATCH] Resolve pycodestyle ambiguous variable usage

---
 .../budgie-keyboard-autoswitch.py                      | 10 +++++-----
 budgie-wmover/wmovertools.py                           |  6 +++---
 budgie-wsoverview/budgie-wsoverview.py                 |  6 +++---
 budgie-wsoverview/wsotools.py                          | 10 +++++-----
 budgie-wswitcher/wswitcher_run                         |  2 +-
 5 files changed, 17 insertions(+), 17 deletions(-)

--- a/budgie-keyboard-autoswitch/budgie-keyboard-autoswitch.py
+++ b/budgie-keyboard-autoswitch/budgie-keyboard-autoswitch.py
@@ -256,10 +256,10 @@
         ]
         # add new languages
         curr_keys = list(self.langdata.keys())
-        for l in self.raw_langlist:
-            readable = self.readable_lang(l)
-            if l not in curr_keys:
-                self.langdata[l] = {"classes": [], "readable": readable}
+        for sl in self.raw_langlist:
+            readable = self.readable_lang(sl)
+            if sl not in curr_keys:
+                self.langdata[sl] = {"classes": [], "readable": readable}
         # remove obsolete languages + data
         for k in curr_keys:
             if k not in self.raw_langlist:
@@ -301,7 +301,7 @@
         if newlang:
             index = self.raw_langlist.index(newlang)
         elif default:
-            getreadables = [self.readable_lang(l) for l in self.raw_langlist]
+            getreadables = [self.readable_lang(sl) for sl in self.raw_langlist]
             index = getreadables.index(self.default_lang)
         self.settings.set_uint("current", index)
 
--- a/budgie-wmover/wmovertools.py
+++ b/budgie-wmover/wmovertools.py
@@ -67,7 +67,7 @@
 
 def get_wsdata():
     wsdata = get(["/usr/bin/wmctrl", "-d"]).splitlines()
-    return (len(wsdata), wsdata.index([l for l in wsdata if "*" in l][0]))
+    return (len(wsdata), wsdata.index([sl for sl in wsdata if "*" in sl][0]))
 
 
 def run(cmd):
@@ -92,8 +92,8 @@
 
         if name not in ["dropby_popup"]:
             ypos = int(
-                [l for l in ydata.splitlines()
-                 if "Position" in l][0].split(",")[1].split()[0]
+                [sl for sl in ydata.splitlines()
+                 if "Position" in sl][0].split(",")[1].split()[0]
             )
             return ypos > yres - 300, subj.strip()
 
--- a/budgie-wsoverview/budgie-wsoverview.py
+++ b/budgie-wsoverview/budgie-wsoverview.py
@@ -88,9 +88,9 @@
             if m[1]:
                 # flattened submenu
                 self.submenu = Gtk.Menu()
-                for l in [d for d in m[1]]:
-                    app = l[0]
-                    wins = [[it[0], it[1]] for it in l[1]]
+                for sl in [d for d in m[1]]:
+                    app = sl[0]
+                    wins = [[it[0], it[1]] for it in sl[1]]
                     for w in wins:
                         name = self.shortname(w[0]) + "  -  " + app
                         winmention = Gtk.MenuItem(name)
--- a/budgie-wsoverview/wsotools.py
+++ b/budgie-wsoverview/wsotools.py
@@ -38,7 +38,7 @@
     # get the current workspace and n- spaces from wmctrl -d
     newsrc = wsdata.splitlines()
     n_ws = len(newsrc)
-    curr_ws = [l.split()[0] for l in newsrc if "*" in l][0]
+    curr_ws = [sl.split()[0] for sl in newsrc if "*" in sl][0]
     return n_ws, curr_ws
 
 
@@ -62,7 +62,7 @@
 
 def get_menuset(wdata):
     # return valid window-ids and workspaces from wmctrl -l
-    allwindows = [l.split() for l in wdata.splitlines()]
+    allwindows = [sl.split() for sl in wdata.splitlines()]
     return [wid[1] for wid in allwindows if not show_wmclass(wid[0]) in ignore]
 
 
@@ -79,9 +79,9 @@
     except TypeError:
         test = False
     if all([not test, newdata]):
-        for l in [w.split() for w in newdata.splitlines()]:
-            wid = l[0]
-            wspace = l[1]
+        for sl in [w.split() for w in newdata.splitlines()]:
+            wid = sl[0]
+            wspace = sl[1]
             wname = get_wmname(wid)
             wmclass = show_wmclass(wid)
             if all([wname, wmclass, wmclass not in ignore]):
--- a/budgie-wswitcher/wswitcher_run
+++ b/budgie-wswitcher/wswitcher_run
@@ -48,7 +48,7 @@
         wsdata = subprocess.check_output([
             "wmctrl", "-d"
         ]).decode("utf-8").splitlines()
-        return [l.split()[0] for l in wsdata if "*" in l][0]
+        return [sl.split()[0] for sl in wsdata if "*" in sl][0]
     except subprocess.CalledProcessError:
         pass
 
--- a/budgie-quickchar/quickchar/src/quickchar
+++ b/budgie-quickchar/quickchar/src/quickchar
@@ -337,7 +337,9 @@
     def __init__(self):
         self.settings = Gio.Settings.new("org.ubuntubudgie.quickchar")
         self.screendata = Wnck.Screen.get_default()
-        self.screendata.connect("window-opened", self.raise_quickchar)
+        self.screendata.force_update()
+        if self.screendata:
+            self.screendata.connect("window-opened", self.raise_quickchar)
         self.settings.connect("changed::showapp", self.callwindow)
         self.chardata = self.create_charlists()
         self.window = None
@@ -359,7 +361,7 @@
 
     def create_charlists(self):
         file = os.path.join(filepath, "chardata")
-        return [l.strip().split() for l in open(file).readlines()]
+        return [sl.strip().split() for sl in open(file).readlines()]
 
 
 class ControlWindow(Gtk.Window):
--- a/tools/run-pep8
+++ b/tools/run-pep8
@@ -10,14 +10,14 @@
   echo >&2 "$ pip install pycodestyle";
   exit 1;
 }
-for i in $(find . -type f -exec grep -l "env python3" {} \;); do
+for i in $(find . -not -path "./.pc/*" -not -path "./debian/patches/*" -type f -exec grep -l "env python3" {} \;); do
     if [[ $i != *pep8 && $i != *meson* && $i != *venv* ]]; then
         echo "checking $i"
         pycodestyle --ignore W191 --ignore E402 $i
     fi
 done
 
-for i in $(find . -type f -iname '*.py'); do
+for i in $(find . -not -path "./.pc/*" -not -path "./debian/patches/*" -type f -iname '*.py'); do
     if [[ $i != *venv* ]]; then
         echo "checking $i:"
         pycodestyle --ignore W191 --ignore E402 $i
